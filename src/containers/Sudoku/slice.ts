import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../redux/store";
// import { fetchCount } from "./counterAPI";

export interface SudokuState {
  progressPuzzle: number[][] | undefined;
  solvedPuzzle: number[][] | undefined;
  initialPuzzle: number[][] | undefined;
  selectedCell: { posX: number; posY: number };
}

const initialState: SudokuState = {
  progressPuzzle: undefined,
  solvedPuzzle: undefined,
  initialPuzzle: undefined,
  selectedCell: { posX: 0, posY: 0 },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   "counter/fetchCount",
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const sudokuSlice = createSlice({
  name: "sudoku",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setProgressPuzzle: (state, action: PayloadAction<number[][]>) => {
      state.progressPuzzle = action.payload;
    },
    updateProgressPuzzle: (
      state,
      action: PayloadAction<{ value: number; reserved: boolean | undefined }>
    ) => {
      if (state.progressPuzzle && action.payload.reserved) {
        state.progressPuzzle[state.selectedCell.posX][state.selectedCell.posY] =
          action.payload.value;
      }
    },
    setSolvedPuzzle: (state, action: PayloadAction<number[][]>) => {
      state.solvedPuzzle = action.payload;
    },
    setInitialPuzzle: (state, action: PayloadAction<number[][]>) => {
      state.initialPuzzle = action.payload;
    },
    setSelectedCell: (
      state,
      action: PayloadAction<{ posX: number; posY: number }>
    ) => {
      state.selectedCell = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = "loading";
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = "idle";
  //         state.value += action.payload;
  //       });
  //   },
});

export const {
  setProgressPuzzle,
  updateProgressPuzzle,
  setSolvedPuzzle,
  setInitialPuzzle,
  setSelectedCell,
} = sudokuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProgressPuzzle = (state: RootState) =>
  state.sudoku.progressPuzzle;
export const selectSolvedPuzzle = (state: RootState) =>
  state.sudoku.solvedPuzzle;
export const selectInitialPuzzle = (state: RootState) =>
  state.sudoku.initialPuzzle;
export const selectSelectedCell = (state: RootState) =>
  state.sudoku.selectedCell;
// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default sudokuSlice.reducer;
